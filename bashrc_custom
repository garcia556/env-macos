#!/bin/bash

######################################################################

function edit_hosts() { sudo vi /etc/hosts; }

###################################

function install_prerequisites()
{
	echo "Checking prerequisites ..."

	if [ ! -x "$(which brew)" ]; then
		/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
	fi

	brew install bash-completion
	brew install thefuck
	brew install p7zip
	brew install graphviz # for deps tree
	brew install gnu-sed # gsed
	brew install subversion
	brew install git
	brew install python3
	brew install mingw-w64
	brew install cask

	brew cask install docker
	brew      install docker-compose
	brew cask install virtualbox
	brew cask install vagrant	

	# completion for docker
	ln -s /Applications/Docker.app/Contents/Resources/etc/docker.bash-completion /usr/local/etc/bash_completion.d/docker

	echo "Done"
}

###################################

function brew_deps_tree()
{
	brew graph --installed | dot -T png -o graph.png
	open graph.png
}

###################################

#https://gist.github.com/mathiasbynens/674099
function appify()
{
	APPNAME=${2:-$(basename "$1" ".sh")}
	DIR="$APPNAME.app/Contents/MacOS"

	if [ -a "$APPNAME.app" ]; then
		echo "$PWD/$APPNAME.app already exists :("
		exit 1
	fi

	mkdir -p "$DIR"
	cp "$1" "$DIR/$APPNAME"
	chmod +x "$DIR/$APPNAME"

	echo "$PWD/$APPNAME.app"
}

###################################

function python_module_check()
{
	local PYTHON="python3"
	local PIP="pip3"

	module=$1
	if [ -z ${module} ]; then
		echo "Module not set"
		return 1
	fi

	echo "Checking python module \"${module}\" ..."

	${PYTHON} -c "import ${module}"
	res=$?

	if [ ${res} == 0 ]; then
		echo "Module found"
	else
		read -p "Module not found! Install? Y/[n] " yn
		if [ "${yn}" == "Y" ]; then
			${PIP} install ${module}
		fi
	fi
}

###################################

function on_remote()
{
	# don't do anything, need to research more regarging ssh agents etc.
	return 1

#	SSH_AUTH_SOCK=$(ls /tmp/*launchd*/Listeners)
#	EXEC_SA="ssh-agent -sssss"

#	echo "Currenty active ssh-agents:"
#	ps auxww | grep ${EXEC_SA} | grep -v grep | sort

#	echo "Killing older ones ..."
#	ps -x -o pid,command | grep --color=never ${EXEC_SA} | grep -v grep | cut -d' ' -f 1 | xargs kill -KILL

#	eval `${EXEC_SA}`
#	ssh-add -K

#	echo "Done, new one started, agents running:"
#	ps auxww | grep ${EXEC_SA} | grep -v grep | sort
}

######################################################################

if [ -x "$(which thefuck)" ]; then
	eval $(thefuck --alias)
fi

if [ -f $(brew --prefix)/etc/bash_completion ]; then
	. $(brew --prefix)/etc/bash_completion
fi

#	#remote connection
#	if [ ! -z "${SSH_CLIENT}" ]; then
#		echo "Welcome, stranger"
#		on_remote
#	fi

#alias ls="ls -hF"

#if [[ "$OSTYPE" == "linux-gnu" ]]; then
#	alias ls="ls --color"
#elif [[ "$OSTYPE" == "darwin"* ]]; then
#	alias ls="ls -G"

alias start="open -n -a"
alias vlc="/Applications/VLC.app/Contents/MacOS/VLC"
alias cvlc="vlc --intf ncurses --no-color" # VLC in console mode
export CLICOLOR=1
export LSCOLORS=GxFxCxDxBxegedabagaced

alias ll="ls -l"
alias l="ll -a"
alias lld="ll -d */"

alias lessn="less -N"
alias lessf="less +F"

alias grep="grep --color=always"

export SVN_EDITOR=$(which vi)
alias svnst="svn status"
alias svnadd="svn status | grep --color=never \"?\" | cut -d \"?\" -f 2 | sed \"s/^ *//;s/ *$//\" | sed \"s/^/\\\"/;s/$/\\\"/\" | xargs -L1 svn add"
alias svndel="svn status | grep --color=never \"!\" | cut -d \"!\" -f 2 | sed \"s/^ *//;s/ *$//\" | sed \"s/^/\\\"/;s/$/\\\"/\" | xargs -L1 svn del"

######################################################################

#  Prompt generated by Giles's Prompt-o-matic, 20081201
#  http://www.gilesorr.com/bashprompt/jsb/prompt.html

PS1="${TITLEBAR}\[\033[0m\]\[\033[1;32m\]\[\033[0m\]\[\033[0;37m\]\[\033[0m\]\[\033[0;37m\]\[\033[0m\]\[\033[1;30m\][\[\033[0m\]\[\033[0;37m\]\[\033[0m\]\[\033[0;37m\][\t]\[\033[0m\]\[\033[1;30m\]]\[\033[1;33m\]\u\[\033[0m\]\[\033[1;31m\]@\[\033[0m\]\[\033[1;34m\]\[\033[0m\]\[\033[0;32m\]\[\033[0m\]\[\033[1;32m\]\h \[\033[0m\]\[\033[0;32m\](\$(ppd=\"\${PWD}\"; let keep=4; let i=0; while [ \"\${ppd}\" != \"\" ]; do ppd=\"\${ppd%/*}\" ; let i=\$i+1; done; if [ \${keep} -ge \${i} ]; then echo \${PWD}; else newPWD=\"\${PWD}\"; while [ \${i} -ge \${keep} ]; do newPWD=\"\${newPWD#*/}\"; let i=\$i-1; done; echo \"<\${newPWD}\"; fi)) \[\033[0m\]\[\033[1;36m\]\[\033[0m\]\[\033[1;37m\]\[\033[1;37m\]\[\033[47m\]\[\033[0;30m\]\[\033[47m\]\[\033[1;33m\]\[\033[44m\]\[\033[1;33m\]\[\033[40m\]\[\033[1;34m\]\[\033[42m\]\[\033[1;36m\]\[\033[40m\]\[\033[1;33m\]\[\033[40m\]:\[\033[1;36m\]\[\033[40m\]:\[\033[0;0m\] "
