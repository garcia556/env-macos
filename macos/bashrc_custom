#!/bin/bash

###################################

function set_prompt()
{
	[ -f /etc/env_type_prod ] && local IS_PROD=1

	local COLOR_NC='\e[0m' # No Color
	local COLOR_WHITE='\e[1;37m'
	local COLOR_BLACK='\e[0;30m'
	local COLOR_BLUE='\e[0;34m'
	local COLOR_LIGHT_BLUE='\e[1;34m'
	local COLOR_GREEN='\e[0;32m'
	local COLOR_LIGHT_GREEN='\e[1;32m'
	local COLOR_CYAN='\e[0;36m'
	local COLOR_LIGHT_CYAN='\e[1;36m'
	local COLOR_RED='\e[0;31m'
	local COLOR_LIGHT_RED='\e[1;31m'
	local COLOR_PURPLE='\e[0;35m'
	local COLOR_LIGHT_PURPLE='\e[1;35m'
	local COLOR_BROWN='\e[0;33m'
	local COLOR_YELLOW='\e[1;33m'
	local COLOR_GRAY='\e[0;30m'
	local COLOR_LIGHT_GRAY='\e[0;37m'

	local COLOR_FG_WHITE_BG_RED='\e[1;37;41m'

	# wrap colors in \[\]
	for var in $(set | grep --color=never "local COLOR_" | grep -v grep | awk '{$1=$1;print}' | cut -d ' ' -f 2); do
		name=$(echo $var | cut -d '=' -f 1)
		value=$(echo $var | cut -d '=' -f 2 | cut -d "'" -f 2)
		value="\\[$value\\]"
		declare ${name}="${value}"
	done

	local KEY_TIME='\t'
	local KEY_USER='\u'
	local KEY_HOST='\h'
	local KEY_DIR='\w'
	local KEY_DIR_SHORT='\W'

#	case $TERM in
#	xterm*)
#		TITLEBAR="\e]0;$KEY_USER@$KEY_HOST:$KEY_DIR\a"
#		;;
#	*)
#		TITLEBAR=""
#		;;
#	esac

	local HOST_COLOR=$COLOR_LIGHT_GREEN
	[ "$IS_PROD" == "1" ] && local HOST_COLOR=$COLOR_FG_WHITE_BG_RED

	PS1="$TITLEBAR\
$COLOR_WHITE[$KEY_TIME]$COLOR_NC \
$COLOR_WHITE($COLOR_NC\
$COLOR_CYAN\$?$COLOR_NC\
$COLOR_WHITE)$COLOR_NC \
$COLOR_YELLOW$KEY_USER$COLOR_NC\
$COLOR_RED@$COLOR_NC\
$HOST_COLOR$KEY_HOST$COLOR_NC \
$COLOR_GREEN$KEY_DIR_SHORT$COLOR_NC\
$COLOR_LIGHT_CYAN\$(__git_ps1)$COLOR_NC \
\$ "

	PS2='> '
	PS4='+ '
}

function set_alias()
{
	alias ls="ls -hF"
	alias ls="ls -G"

	alias ll="ls -l"
	alias l="ll -a"
	alias lld="ll -d */"

	alias lessn="less -N"
	alias lessf="less +F"

	alias dmesg="dmesg --color"

	alias grep="grep --color=always"

	alias start="open -n -a"
	alias vlc="/Applications/VLC.app/Contents/MacOS/VLC"
	alias cvlc="vlc --intf ncurses --no-color" # VLC in console mode
	alias sleep_display="pmset displaysleepnow"
}

###################################

function edit_hosts() { sudo vi /etc/hosts; }

###################################

function install_prerequisites()
{
	echo "Checking prerequisites ..."

	if [ ! -x "$(which brew)" ]; then
		/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
	fi

	brew bundle

	# completion for docker
	ln -s /Applications/Docker.app/Contents/Resources/etc/docker.bash-completion /usr/local/etc/bash_completion.d/docker

	echo "Done"
}

###################################

function brew_deps_tree()
{
	brew graph --installed | dot -T png -o graph.png
	open graph.png
}

###################################

#https://gist.github.com/mathiasbynens/674099
function appify()
{
	APPNAME=${2:-$(basename "$1" ".sh")}
	DIR="$APPNAME.app/Contents/MacOS"

	if [ -a "$APPNAME.app" ]; then
		echo "$PWD/$APPNAME.app already exists :("
		exit 1
	fi

	mkdir -p "$DIR"
	cp "$1" "$DIR/$APPNAME"
	chmod +x "$DIR/$APPNAME"

	echo "$PWD/$APPNAME.app"
}

###################################

function python_module_check()
{
	local PYTHON="python3"
	local PIP="pip3"

	module=$1
	if [ -z ${module} ]; then
		echo "Module not set"
		return 1
	fi

	echo "Checking python module \"${module}\" ..."

	${PYTHON} -c "import ${module}"
	res=$?

	if [ ${res} == 0 ]; then
		echo "Module found"
	else
		read -p "Module not found! Install? Y/[n] " yn
		if [ "${yn}" == "Y" ]; then
			${PIP} install ${module}
		fi
	fi
}

###################################

function unquarantine_file()
{
	xattr -d com.apple.quarantine $1
}

###################################

# copy-paste from /etc/bashrc_Apple_Terminal
function update_terminal_cwd() {
# Identify the directory using a "file:" scheme URL, including
# the host name to disambiguate local vs. remote paths.

# Percent-encode the pathname.
local url_path=''
{
    # Use LC_CTYPE=C to process text byte-by-byte. Ensure that
    # LC_ALL isn't set, so it doesn't interfere.
    local i ch hexch LC_CTYPE=C LC_ALL=
    for ((i = 0; i < ${#PWD}; ++i)); do
	ch="${PWD:i:1}"
	if [[ "$ch" =~ [/._~A-Za-z0-9-] ]]; then
	    url_path+="$ch"
	else
	    printf -v hexch "%02X" "'$ch"
	    # printf treats values greater than 127 as
	    # negative and pads with "FF", so truncate.
	    url_path+="%${hexch: -2:2}"
	fi
    done
}

printf '\e]7;%s\a' "file://$HOSTNAME$url_path"
}

###################################

touch ~/.bash_sessions_disable

HISTSIZE=5000
HISTFILESIZE=10000
HISTCONTROL=ignoredups:erasedups
PROMPT_COMMAND="update_terminal_cwd; history -a; history -c; history -r"
shopt -s histappend

CLICOLOR=1
LSCOLORS=GxFxCxDxBxegedabagaced

GIT_PS1_SHOWDIRTYSTATE=1

if [ -x "$(which thefuck)" ]; then
	eval $(thefuck --alias)
fi

if [ -f $(brew --prefix)/etc/bash_completion ]; then
	. $(brew --prefix)/etc/bash_completion
fi

source <(hcloud completion bash)
source <(yc completion bash)

set_alias
set_prompt

